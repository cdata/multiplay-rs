[package]
name = "multiplay-rs-client"
version = "0.1.0"
authors = ["Chris Joel <chris@scriptolo.gy>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]
native_target = ["tokio-tungstenite", "tokio"]

[dependencies]
wasm-bindgen = "0.2.63"
multiplay-rs = { path = "../lib", version = "*" }
anyhow = "1.0.51"
flume = "0.10.9"
log = "0.4"
serde_cbor = "0.11.2"
url = "2.2.2"
futures = "0.3.17"

tokio-tungstenite = { version = "0.16.1", optional = true }
tokio = { version = "1.9.0", features = ["full"], optional = true }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

[dependencies.serde]
version = "1.0.130"
features = ["derive"]

[dependencies.async-std]
version = "1.10.0"
features = ["attributes", "unstable"]

[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
